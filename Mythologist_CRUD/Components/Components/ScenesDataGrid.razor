@using SharedLogic.Services
@using SharedLogic.Model
@using Mythologist_CRUD.Components
@using Mythologist_CRUD.Components.Dialogs
@using MudBlazor
@using SharedLogic.Utils

@inject ISnackbar snackBar
@inject IDialogService DialogService
@inject IDatabaseConnectionService dbConnection;
@inject NavigationManager NavManager

<MudExtensions.MudLoading Loading="loading">
    <MudStack>
        <MudDataGrid T="SceneModel" Items="allScenes" Class="styled-table-cell">
            <Columns>
                <PropertyColumn Property="x => x.id" Title="Name" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate >
                        <MudTooltip Delay="700" Text="Edit Scene." RootClass="d-inline">
                            <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => EditSceneButtonClicked(context.Item))" />
                        </MudTooltip>
                        <MudTooltip Delay="700" Text="Duplicate Scene." RootClass="d-inline">
                            <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.CopyAll" OnClick="@(() => DuplicateSceneButtonClicked(context.Item))" />
                        </MudTooltip>
                        <MudTooltip Delay="700" Text="Delete Scene." RootClass="d-inline">
                            <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Outlined.Close" OnClick="@(() => DeleteSceneButtonClicked(context.Item))" />
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        <MudStack Class="d-flex justify-start flex-grow-1 gap-4" Row="true">
            <MudButton @onclick="@(() => NewSceneButtonClicked())" Disabled="!RequiredParamsSet()" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Primary">New Scene</MudButton>
        </MudStack>
    </MudStack>
</MudExtensions.MudLoading>

@code {
    [Parameter]
    public string? GameName { get; set; } = null;

    private List<SceneModel>? allScenes = null;
    private bool loading = true;

    protected override async Task OnParametersSetAsync() {
        if (GameName != null) {
            allScenes = await dbConnection.AllScenes(GameName);
            loading = false;
        }
    }

    private async Task NewSceneButtonClicked(){
        var dialog = await DialogService.ShowAsync<NewSceneDialog>("New Scene");
        var result = await dialog.Result;

        if (GameName == null) {
            snackBar.Add("Unexpected null GameName");
            return;
        }
        if (allScenes == null) {
            snackBar.Add("Unexpected null scene list");
            return;
        }

        if (!result!.Canceled)
        {
            string? newSceneName = result.Data as string;
            if (newSceneName == null)
            {
                snackBar.Add($"Failed to add {newSceneName} to database", Severity.Error);
            }
            else if (allScenes.Exists(x => x.id.ToLower() == newSceneName.ToLower()))
            {
                snackBar.Add($"'{newSceneName}' already exists", Severity.Error);
            }
            else
            {
                SceneModel newSceneModel = new SceneModel(newSceneName);
                bool? addSceneSuccess = await AddSceneToDB(newSceneModel);
                if (!addSceneSuccess.GetValueOrDefault(false))
                {
                    snackBar.Add($"Failed to add {newSceneModel.id} to database", Severity.Error);
                }
                else
                {
                    snackBar.Add($"{newSceneModel.id} Added", Severity.Success);
                    allScenes = await dbConnection.AllScenes(GameName);
                }
            }
        }
    }

    private async Task DuplicateSceneButtonClicked(SceneModel sceneModel) {
        if (allScenes == null) {
            snackBar.Add("Unexpected null scenes list");
            return;
        }

        if (GameName == null) {
            snackBar.Add("Unexpected null GameName");
            return;
        }


        SceneModel newSceneModel = (SceneModel)sceneModel.Clone();


        newSceneModel.id = DataValidation.CreateUniqueString(newSceneModel.id, allScenes.Select(x => x.id));
        bool? addSceneSuccess = await AddSceneToDB(newSceneModel);
        if (!addSceneSuccess.GetValueOrDefault(false)) {
            snackBar.Add($"Failed to add {newSceneModel.id} to database", Severity.Error);
        }
        else {
            snackBar.Add($"{newSceneModel.id} Added", Severity.Success);
            allScenes = await dbConnection.AllScenes(GameName);
        }

    }

    private bool RequiredParamsSet()
    {
        return GameName != null;
    }

    private async Task DeleteSceneButtonClicked(SceneModel sceneModel)
    {
        if (allScenes == null) {
            snackBar.Add("Unexpected null scenes list");
            return;
        }

        if (allScenes.Count <= 1) {
            snackBar.Add("Games must have at least one scene");
            return;
        }

        if (GameName == null) {
            snackBar.Add("Unexpected null GameName");
            return;
        }

        bool? result = await DialogService.ShowMessageBox(
            "Are you sure?",
            $"Once {sceneModel.id} is deleted it cannot be restored",
            yesText: "Delete", cancelText: "Cancel");

        if (result.GetValueOrDefault(false))
        {
            bool? deleteSuccess = await DeleteSceneFromDB(sceneModel);
            if (!deleteSuccess.GetValueOrDefault(false))
            {
                snackBar.Add($"Failed to remove {sceneModel.id} from database", Severity.Error);
            }
            else
            {
                snackBar.Add($"{sceneModel.id} deleted", Severity.Success);
                allScenes = await dbConnection.AllScenes(GameName);
            }
        }
    }

    private void EditSceneButtonClicked(SceneModel sceneModel)
    {
        NavManager.NavigateTo($"editscene/{sceneModel.id}");
    }

    private async Task<bool> AddSceneToDB(SceneModel sceneModel)
    {
        if (!RequiredParamsSet())
        {
            return false;
        }
        try {
            await dbConnection.AddScene(GameName!, sceneModel);
            return true;
        }
        catch (Exception ex) {
            snackBar.Add(ex.Message, Severity.Error);
            return false;
        }
    }

    private async Task<bool> DeleteSceneFromDB(SceneModel sceneModel)
    {
        if (!RequiredParamsSet())
        {
            return false;
        }

        await dbConnection.RemoveScene(GameName!, sceneModel);
        return true;
    }
}
