@page "/"

@using MudBlazor
@using Mythologist_CRUD.Components
@using Mythologist_CRUD.Components.Dialogs
@using Mythologist_CRUD.Components.Layout
@using SharedLogic.Services

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@inject IConfiguration configuration
@inject IDatabaseConnectionService dbConnection

<div style="height: calc(100vh - 120px); display: flex; justify-content: center; align-items: center;">
    <MudStack Class="d-flex justify-center" Style="align-items:center; margin-top:-60px" Spacing="4">
        <!-- Pointer events mean sometimes the title is focused, which in some browsers gives you this awful outline on some fonts -->
        <MudText Typo="Typo.h1" Class="titleanimId" Style="max-width:800px; display: flex; justify-content:center; flex-direction:column; text-align:center;">Mythologist Creator</MudText>

        <MudStack Row="true" Spacing="2">
            <MudFocusTrap DefaultFocus="DefaultFocus.LastChild">
                <MudButton Color="Color.Secondary" Class="buttonsAnimId" Style="font-size:1.2rem; min-width:250px" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" @onclick="NewGameButtonClicked">Create</MudButton>
                <MudButton Color="Color.Primary" Class="buttonsAnimId" Style="font-size:1.2rem; min-width:250px" StartIcon="@Icons.Material.Filled.Login" Variant="Variant.Filled" @onclick="LoginButtonClicked">Login</MudButton>
            </MudFocusTrap>
        </MudStack>
        <MudText Typo="Typo.subtitle1" Class="mt-2 taglineAnimId">Prep Sessions. Play Myths.</MudText>
    </MudStack>
</div>

<style>
    .blur-dialog-background {
        backdrop-filter: blur(6px);
    }
</style>


@code {

    private async Task NewGameButtonClicked()
    {
        var options = new DialogOptions { BackgroundClass = "blur-dialog-background", BackdropClick = false };
        var parameters = new DialogParameters<NewGameDialog> {};
        var dialog = await DialogService.ShowAsync<NewGameDialog>("New Game", parameters, options);
        var result = await dialog.Result;

        // After a new game is created, immediately login and redirect to the logged in landing page
        if (result != null && !result.Canceled && result.Data != null)
        {
            Tuple<string, string> gameNameAndGmPassword = result.Data as Tuple<string, string>;
            LoginAndRedirect(gameNameAndGmPassword.Item1, gameNameAndGmPassword.Item2);
        }
    }

    private async Task LoginButtonClicked()
    {
        var options = new DialogOptions { BackgroundClass = "blur-dialog-background", BackdropClick = false };
        var parameters = new DialogParameters<LoginToGameDialog> {};
        var dialog = await DialogService.ShowAsync<LoginToGameDialog>("Login", parameters, options);

        var result = await dialog.Result;

        // After a new game is created, immediately login and redirect to the logged in landing page
        if (result != null && !result.Canceled && result.Data != null)
        {
            Tuple<string, string> gameNameAndGmPassword = result.Data as Tuple<string, string>;
            Console.WriteLine("Logging in");
            LoginAndRedirect(gameNameAndGmPassword.Item1, gameNameAndGmPassword.Item2);
        }
    }


    private async Task LoginAndRedirect(string gameName, string GMPassword)
    {
        var setNameTask = sessionStorage.SetItemAsync("GameName", gameName);
        var setPasswordTask = sessionStorage.SetItemAsync("GMPassword", GMPassword);
        await setNameTask;
        await setPasswordTask;

        //The dialog should have already confirmed that you're allowed to log in
        NavManager.NavigateTo("/scenelist");
    }

    [CascadingParameter]
    public MainLayout Layout { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender){
            //Just cleanup when we arrive in case there's storage lying around
            var setNameTask = sessionStorage.SetItemAsync<string?>("GameName", null);
            var setPasswordTask = sessionStorage.SetItemAsync<string?>("GMPassword", null);
            await setNameTask;
            await setPasswordTask;


            //You can back into this page and the header will still show the game name
            Layout.SetGMPassword(null);
            Layout.SetHeaderName("");
            Layout.SetNavMenuEnabled(false);
        }
    }

}