@using Mythologist_Client_WASM.Client.Infos
@using SharedLogic.Model

@inject ISnackbar snackBar;

<!-- Now we're not doing stupid shit with the scene select, this can probably be much simpler-->
<style>
    .mainContentContainer {
        max-width: 100vw;
        min-width: 100vw;
        height: auto;
        max-height: calc(100vh - 50px);
        min-height: calc(100vh - 50px);
        width: auto;
        align-items: center;
        object-fit: contain;
        justify-content: center;
        display: flex;
        position: relative
    }

    .backgroundImage {
        position: fixed;
        top: 50%;
        left: 50%;
        transform-origin:center;
        transform: translate(-50%, -50%) scale(0.9);
        z-index: -1;
    }

    .contentGrid {
        height: auto;
        max-height: calc(100vh - 50px);
        min-height: calc(100vh - 50px);
        width: 100vw;
        align-items: center;
        position: absolute;
        top: 25px;
        left: 0px;
    }

    .shadow-outlined {
        text-shadow: 0.05em 0 black, 0 0.05em black, -0.05em 0 black, 0 -0.05em black, -0.05em -0.05em black, -0.05em 0.05em black, 0.05em -0.05em black, 0.05em 0.05em black;
    }

    .background-image-div{
        background-image: url("@BackgroundImageUrl()"); /* The image used */
        background-color: transparent; /* Used if the image is unavailable */
        background-position: center; /* Center the image */
        background-repeat: no-repeat; /* Do not repeat the image */
        background-size: contain; /* Resize the background image to cover the entire container */
        width: 100%;
        height: 100%;
        transform-origin: center;
        transform: scale(1.2);
        margin-top: 2vh;
        z-index: -1;
    }

</style>

<style>
    .debug-div-1 {
        border: 1px solid red;
    }

    .debug-div-2 {
        border: 1px solid blue;
    }

    .debug-div-3 {
        border: 1px solid green;
    }

    .debug-div-4 {
        border: 1px solid yellow;
    }

</style>

<!--<div class="mainContentContainer">-->
<!--<MudImage Class="backgroundImage" Src="@CurrentScene?.backgroundImageUri?.ToString()" ObjectPosition="ObjectPosition.Center" ObjectFit="ObjectFit.ScaleDown"></MudImage>-->
<MudStack Row="true" Class="pa-0 ma-0 debug-div-1" Justify="Justify.SpaceBetween" StretchItems="StretchItems.End" Style="min-height: calc(100vh - 50px); max-height: calc(100vh - 50px);" Spacing="0">
    <CharactersInScenePanel GameName="@GameName" CurrentScene=@CurrentScene AllCharacters="@AllCharacters" LocalClient="@LocalClient" LiveCharacterInfo="@LiveCharacterInfo"></CharactersInScenePanel>
    <MudStack Class="d-flex pa-0 ma-0 debug-div-2" AlignItems="AlignItems.Center" StretchItems="StretchItems.Middle" Style="" Spacing="0">
        
        
        <MudStack Row="true" Justify="Justify.SpaceBetween">

        @if (@GameInfo.gameSettings.showSceneTitle) {
            <MudText Typo="Typo.h4" Class="d-flex shadow-outlined">@CurrentScene.id</MudText>

        }

        @if (CurrentScene != null && CurrentScene.sceneNotes != null && CurrentScene.sceneNotes.Length > 0 && LocalClient != null && LocalClient.isGM) {
            <MudExpansionPanel Style="position:absolute; max-width:30vw; right:10px; z-index:10">
                <TitleContent>
                    <MudText Typo="Typo.subtitle1" >Scene Notes</MudText>
                </TitleContent>
                <ChildContent>
                        <MudText Typo="Typo.body1" Class="flex-grow-1" Style="white-space: pre-line;">@SceneNotesText()</MudText>
                </ChildContent>
            </MudExpansionPanel>
        }

        </MudStack>

        <div class="debug-div-4" style="display:flex; flex-grow: 1; justify-content:center; margin-left:0; margin-right:0; width:100%; height:100%;">
            <div class="debug-div-2" style="position:absolute; padding-left:5vw; padding-right:5vw; margins:0; top:100px; bottom: 65%; align-content:center; width:auto; z-index:5;">
                <!-- Announcement Div 
                <MudText Class="shadow-outlined" Typo="Typo.h4">@AnnouncementText</MudText>
                -->
            </div>
            <MudGrid Justify="Justify.Center" Class="debug-div-1 ma-0 pa-0" Style="position:absolute; top:35%; bottom: 85px; width:auto; z-index:5;">
                <!-- MAIN CONTENT ELEMENT DISPLAY
                <MudItem Style="align-self: flex-end;">
                  
                </MudItem>
                -->
            </MudGrid>
            <div class="background-image-div debug-div-3">
            </div>
        </div>

        <MudStack Class="debug-div-3;" Row="true" Style="position:relative; top:-18px;">
            <!-- bottom row. For the popups -->
            @foreach (ClientInfo client in ClientsInScene(@CurrentScene.id)) {
                <PlayerPlate Client="client"></PlayerPlate>
            }
        </MudStack>

    </MudStack>
</MudStack>

   
<!--</div>-->
@code {

    [Parameter]
    public string? GameName { get; set; }

    [Parameter]
    public GameInfo? GameInfo { get; set; }

    [Parameter]
    public SceneModel? CurrentScene { get; set; }

    [Parameter]
    public List<ClientInfo>? ConnectedClients { get; set; }

    [Parameter]
    public ClientInfo? LocalClient { get; set; }

    [Parameter]
    public List<CharacterModel>? AllCharacters { get; set; }

    [Parameter]
    public Dictionary<string, Dictionary<string, CharacterInfo>>? LiveCharacterInfo { get; set; }


    private List<ClientInfo> ClientsInScene(string sceneId)
    {
        if (ConnectedClients == null)
        {
            return new List<ClientInfo>();
        }

        return ConnectedClients.Where(x => x.currentSceneID == sceneId).ToList();
    }

    private string BackgroundImageUrl() {
        if (CurrentScene == null) {
            return "";
        }

        if (CurrentScene.backgroundImageUri == null) {
            return "";
        }

        //Thought about escaping percent encoding here, but it dosent seem neccesary.
        return CurrentScene.backgroundImageUri.ToString();
    }

    private string SceneNotesText() {
        if ((CurrentScene == null) || (CurrentScene.sceneNotes == null)) {
            return "";
        }
        return CurrentScene.sceneNotes;
    }
}