@using Mythologist_Client_WASM.Client.Infos
@using SharedLogic.Model

<style>
    .shadow-outlined {
        text-shadow: 0.05em 0 black, 0 0.05em black, -0.05em 0 black, 0 -0.05em black, -0.05em -0.05em black, -0.05em 0.05em black, 0.05em -0.05em black, 0.05em 0.05em black;
    }
</style>

@if (Character != null && LiveCharacterInfo != null && CurrentScene != null && EnterExitSceneToggleChanged != null) {

    @if ((!IsGMView) && (!@HasCharacterEnteredScene(Character.id))) {
        //Render nothing if we're a player and the character isn't here
    }
    else {
        //We're renderin' somin!

        <div style="width:128px; height:128px; padding-top:15px; padding-bottom:15px; margin-top:1px; margin-bottom:1px;">

        @if (Character.portraitImageUri != null)
        {
            @if (@HasCharacterEnteredScene(Character.id))
            {
                <MudImage Class="rounded-lg" Src="@Character.portraitImageUri.ToString()" ObjectFit="ObjectFit.Cover" Fluid="false" Width="128" Height="128" Elevation="25" Style="z-index: 1;" />
            }
            else
            {
                <MudImage Class="rounded-lg" Src="@Character.portraitImageUri.ToString()" ObjectFit="ObjectFit.Cover" Fluid="false" Width="128" Height="128" Elevation="25" Style="opacity:0.4; filter: grayscale(100%); z-index: 1;" />
            }
        }
        else
        {
            //Show null portrait
        }

        <MudText Class="mt-n7 shadow-outlined" Typo="Typo.body2" Align="Align.Center" Style="max-width: 128px; overflow:clip; white-space: nowrap; z-index: 2;">@Character.id</MudText>
        </div>
    }
}
@code {

    [Parameter]
    public CharacterModel? Character { get; set; }

    [Parameter]
    public Dictionary<string, Dictionary<string, CharacterInfo>>? LiveCharacterInfo { get; set; }

    [Parameter]
    public SceneModel? CurrentScene { get; set; }

    [Parameter]
    public Action<CharacterModel, bool>? EnterExitSceneToggleChanged { get; set; }

    [Parameter]
    public bool IsGMView { get; set; }

    private bool HasCharacterEnteredScene(string characterID) {
        if ((LiveCharacterInfo == null) || (CurrentScene == null)) {
            return false;
        }

        if (!LiveCharacterInfo.ContainsKey(CurrentScene.id)) {
            return false;
        }

        if (!LiveCharacterInfo[CurrentScene.id].ContainsKey(characterID)) {
            throw new Exception($"Session Character Info does not contain character '{characterID}'");
        }

        return LiveCharacterInfo[CurrentScene.id][characterID].hasEnteredScene;
    }

    private string EnterExitSceneTooltip(string characterId) {
        return HasCharacterEnteredScene(characterId) ? "Exit Scene" : "Enter Scene";
    }

}
