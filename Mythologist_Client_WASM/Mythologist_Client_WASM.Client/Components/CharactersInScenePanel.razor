@using Mythologist_Client_WASM.Client.Infos
@using SharedLogic.Model

<style>
    .shadow-outlined {
        text-shadow: 0.05em 0 black, 0 0.05em black, -0.05em 0 black, 0 -0.05em black, -0.05em -0.05em black, -0.05em 0.05em black, 0.05em -0.05em black, 0.05em 0.05em black;
    }
</style>

@if (charactersInScene.Count > 0)
{
    <MudPaper Class="mt-n4">
        <MudText Typo="Typo.subtitle1" Align="Align.Center">NPC's</MudText>
        <MudPaper Class="pa-2" Style="min-width:64px; max-height:88vh; overflow-y:scroll; background-color:transparent">
                <MudStack AlignItems="AlignItems.Center">
                    @foreach (CharacterModel character in charactersInScene) {
                        @if(character.portraitImageUri != null){
                            <MudImage Src="@character.portraitImageUri.ToString()" ObjectFit="ObjectFit.Cover" Fluid="true" Width="160"/>
                            <MudText Typo="Typo.body2" Align="Align.Center">@character.id</MudText>
                        }
                    }
                </MudStack>

        </MudPaper>
    </MudPaper>
}
@code {
    [Parameter]
    public SceneModel? CurrentScene { get; set; }

    [Parameter]
    public List<CharacterModel>? AllCharacters { get; set; }

    private List<CharacterModel> charactersInScene = new List<CharacterModel>();

    protected override void OnParametersSet() {
        if (CurrentScene == null || AllCharacters == null) {
            return;
        }

        charactersInScene.Clear();

        foreach(string id in CurrentScene.charactersIdsInScene) {
            CharacterModel? character = AllCharacters.Find(x => x.id == id);

            if (character != null) {
                charactersInScene.Add(character);
            }
        }
    }
}
