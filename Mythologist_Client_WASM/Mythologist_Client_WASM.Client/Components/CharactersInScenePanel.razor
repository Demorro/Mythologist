@using Mythologist_Client_WASM.Client.Infos
@using SharedLogic.Model

<style>
    .shadow-outlined {
        text-shadow: 0.05em 0 black, 0 0.05em black, -0.05em 0 black, 0 -0.05em black, -0.05em -0.05em black, -0.05em 0.05em black, 0.05em -0.05em black, 0.05em 0.05em black;
    }
</style>

@if ((charactersInScene.Count > 0) && (LiveCharacterInfo != null))
{
    <MudPaper Class="mt-n4">
        <MudText Typo="Typo.subtitle1" Align="Align.Center">NPC's</MudText>
        <MudPaper Class="pa-2" Style="min-width:64px; max-height:88vh; overflow-y:scroll; background-color:transparent">
                <MudStack AlignItems="AlignItems.Center">
                    @foreach (CharacterModel character in charactersInScene) {
                        @if(character.portraitImageUri != null){
                        @if (@HasCharacterEnteredScene(character.id)){
                            <MudImage Src="@character.portraitImageUri.ToString()" ObjectFit="ObjectFit.Cover" Fluid="true" Width="160"/>
                        }
                        else {
                            <MudImage Src="@character.portraitImageUri.ToString()" ObjectFit="ObjectFit.Cover" Fluid="true" Width="160" Style="opacity:0.4; filter: grayscale(100%)" />
                        }
                        <MudStack Row="true" AlignItems="AlignItems.End" Justify="Justify.SpaceEvenly" Style="margin-top:-54px; margin-left:auto; margin-right:2px;" Spacing="0">
                                <MudTooltip Text="Bio">
                                    <MudIconButton Class="pa-1 ma-1" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Feed" Color="Color.Primary"></MudIconButton>
                                </MudTooltip>
                                @if (LocalClient != null && LocalClient.isGM)
                                {
                                    <MudTooltip Text="@EnterExitSceneTooltip(character.id)">
                                        <MudToggleIconButton Class="pa-1 ma-1" Toggled="@HasCharacterEnteredScene(character.id)" ToggledChanged="toggledBool => EnterExitSceneToggleChanged(character, toggledBool)" Variant="Variant.Filled" Icon="@Icons.Material.Filled.GroupAdd" ToggledIcon="@Icons.Material.Filled.GroupRemove" Color="Color.Primary"></MudToggleIconButton>
                                    </MudTooltip>
                                }
                            </MudStack>
                            <MudText Typo="Typo.body2" Align="Align.Center">@character.id</MudText>
                        }
                    }
                </MudStack>
        </MudPaper>
    </MudPaper>
}
@code {
    [Parameter]
    public SceneModel? CurrentScene { get; set; }

    [Parameter]
    public List<CharacterModel>? AllCharacters { get; set; }

    [Parameter]
    //Assumed to contain all characters
    public Dictionary<string, Dictionary<string, CharacterInfo>>? LiveCharacterInfo { get; set; }

    [Parameter]
    public ClientInfo? LocalClient { get; set; }

    private List<CharacterModel> charactersInScene = new List<CharacterModel>();

    protected override void OnParametersSet() {
        //charactersIdsInScene shouldn't really be null, but CRUD stays under development so this is nice for upgrading
        if (CurrentScene == null || AllCharacters == null || CurrentScene.charactersIdsInScene == null) {
            return;
        }

        charactersInScene.Clear();

        foreach(string id in CurrentScene.charactersIdsInScene) {
            CharacterModel? character = AllCharacters.Find(x => x.id == id);

            if (character != null) {
                charactersInScene.Add(character);

            }
        }
    }

    private void EnterExitSceneToggleChanged(CharacterModel character, bool toggle) {
        string characterID = character.id;

        if ((LiveCharacterInfo == null) || (CurrentScene == null)) {
            return;
        }

        if (!LiveCharacterInfo.ContainsKey(CurrentScene.id)) {
            return;
        }

        if (!LiveCharacterInfo[CurrentScene.id].ContainsKey(characterID)) {
            throw new Exception($"Session Character Info does not contain character '{characterID}'");
        }

        LiveCharacterInfo[CurrentScene.id][characterID].hasEnteredScene = toggle;
    }

    private bool HasCharacterEnteredScene(string characterID) {
        if ((LiveCharacterInfo == null) || (CurrentScene == null)){
            return false;
        }

        if (!LiveCharacterInfo.ContainsKey(CurrentScene.id)) {
            return false;
        }

        if (!LiveCharacterInfo[CurrentScene.id].ContainsKey(characterID)) {
            throw new Exception($"Session Character Info does not contain character '{characterID}'");
        }

        return LiveCharacterInfo[CurrentScene.id][characterID].hasEnteredScene;
    }

    private string EnterExitSceneTooltip(string characterId) {
        return HasCharacterEnteredScene(characterId) ? "Exit Scene" : "Enter Scene";
    }
}
