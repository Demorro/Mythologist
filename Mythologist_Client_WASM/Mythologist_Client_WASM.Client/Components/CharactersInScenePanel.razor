@using Mythologist_Client_WASM.Client.Infos
@using SharedLogic.Model

@inject ISignalRHubClientService signalRHub;

<style>
    .shadow-outlined {
        text-shadow: 0.05em 0 black, 0 0.05em black, -0.05em 0 black, 0 -0.05em black, -0.05em -0.05em black, -0.05em 0.05em black, 0.05em -0.05em black, 0.05em 0.05em black;
    }
</style>

@if (@RenderingAnyNPCs()) {
    <MudPaper Class="mt-n4">
        <MudText Typo="Typo.subtitle1" Align="Align.Center">NPC's</MudText>
        <MudPaper Class="pa-2" Style="min-width:64px; max-height:88vh; overflow-y:scroll; background-color:transparent">
                <MudStack AlignItems="AlignItems.Center">
                    @foreach (CharacterModel character in charactersInScene) {
                    <NPCPlate IsGMView="@LocalClient.isGM" Character="@character" LiveCharacterInfo="@LiveCharacterInfo" CurrentScene="@CurrentScene" EnterExitSceneToggleChanged="@EnterExitSceneToggleChanged"></NPCPlate>
                    }
                </MudStack>
        </MudPaper>
    </MudPaper>
}
@code {

    [Parameter]
    public string? GameName { get; set; }

    [Parameter]
    public SceneModel? CurrentScene { get; set; }

    [Parameter]
    public List<CharacterModel>? AllCharacters { get; set; }

    [Parameter]
    //Assumed to contain all characters
    public Dictionary<string, Dictionary<string, CharacterInfo>>? LiveCharacterInfo { get; set; }

    [Parameter]
    public ClientInfo? LocalClient { get; set; }

    private List<CharacterModel> charactersInScene = new List<CharacterModel>();

    protected override void OnParametersSet() {
        //charactersIdsInScene shouldn't really be null, but CRUD stays under development so this is nice for upgrading
        if (CurrentScene == null || AllCharacters == null || CurrentScene.charactersIdsInScene == null) {
            return;
        }

        charactersInScene.Clear();

        foreach(string id in CurrentScene.charactersIdsInScene) {
            CharacterModel? character = AllCharacters.Find(x => x.id == id);

            if (character != null) {
                charactersInScene.Add(character);

            }
        }
    }

    private void EnterExitSceneToggleChanged(CharacterModel character, bool toggle) {
        string characterID = character.id;

        if (GameName == null) {
            return;
        }

        if ((LiveCharacterInfo == null) || (CurrentScene == null)) {
            return;
        }

        if (!LiveCharacterInfo.ContainsKey(CurrentScene.id)) {
            return;
        }

        if (!LiveCharacterInfo[CurrentScene.id].ContainsKey(characterID)) {
            throw new Exception($"Session Character Info does not contain character '{characterID}'");
        }

        LiveCharacterInfo[CurrentScene.id][characterID].hasEnteredScene = toggle;
        signalRHub.UpdateCharacterState(GameName, LiveCharacterInfo[CurrentScene.id][characterID]);
    }

    private bool RenderingAnyNPCs() {
        if (LiveCharacterInfo == null || LocalClient == null || CurrentScene == null) {
            return false;
        }

        if (!LiveCharacterInfo.ContainsKey(CurrentScene.id)) {
            return false;
        }

        if (LocalClient.isGM && LiveCharacterInfo[CurrentScene.id].Count > 0) {
            return true;
        }

        var allInfos = LiveCharacterInfo[CurrentScene.id].Values;
        foreach(CharacterInfo info in allInfos) {
            if (info.hasEnteredScene){
                return true;
            }
        }

        return false;
    }
}
