@using Mythologist_Client_WASM.Client.Infos
@using SharedLogic.Model
@using SharedLogic.Utils
@using SharedLogic.Events

@inject ISignalRHubClientService signalRHub;
@inject ISnackbar snackBar

<MudStack Row="true" Spacing="0" Style="width:50%;">
    <MudTextField @bind-Value="SendValue" Margin="Margin.Dense" Label="Message" Variant="Variant.Outlined" Immediate="true" OnKeyDown="SendMessageClicked"></MudTextField>
    <MudSelect T="ClientInfo" @bind-SelectedValues="SelectedClients" Variant="Variant.Outlined" Margin="Margin.Dense" SelectAll="true" Label="Send to" MultiSelection="true" ToStringFunc="@converter" AnchorOrigin="Origin.BottomCenter" Style="width:10%">
        @if ((Clients != null) && (LocalClient != null))
        {
            @foreach (var player in Clients)
            {
                @if (player.signalRConnectionID != LocalClient.signalRConnectionID)
                {
                    <MudSelectItem T="ClientInfo" Value="@player">@player.userName</MudSelectItem>
                }
            }
        }
    </MudSelect>
    @if ((Clients != null) && (LocalClient != null) && (CharactersInScene != null)) {
        @if (LocalClient.isGM) {
            <MudSelect T="string" @bind-Value="sendAsName" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Send as" MultiSelection="false" AnchorOrigin="Origin.BottomCenter" Style="width:10%">
                    @foreach (var player in Clients) {
                    <MudSelectItem T="string" Value="@player.userName">@player.userName</MudSelectItem>
                    }
                    @foreach (var character in CharactersInScene) {
                    <MudSelectItem T="string" Value="@character.id">@character.id</MudSelectItem>
                    }
            </MudSelect>
        }
    }
</MudStack>

@code {
    [Parameter]
    public List<ClientInfo> Clients { get; set; }

    [Parameter]
    public ClientInfo LocalClient { get; set; }

    protected override void OnParametersSet() {
        // React to the parameter being set
        if (LocalClient != null) {
            sendAsName = LocalClient.userName;
            StateHasChanged();
        }

        base.OnParametersSet();
    }
    
    [Parameter]
    public List<CharacterModel> CharactersInScene { get; set; }

    Func<ClientInfo, string> converter = p => p?.userName;

    private string sendAsName = "";

    [Parameter]
    public string GameName { get; set; }

    private string? SendValue { get; set; }
    private IEnumerable<ClientInfo> SelectedClients { get; set; } = new HashSet<ClientInfo>();

    private string GetMultiSelectionText(List<ClientInfo> selectedValues)
    {
        return String.Join(", ", selectedValues.Select(x => x.userName));
    }

    private void SendMessageClicked(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (DataValidation.SanitizeMessageStringWithErrorSnackbar(SendValue, snackBar) == null) {
                return;
            }

            Event sendEvent = new Event
                {
                    EEventType = Event.EventType.SendText,
                    Text = SendValue,
                    SenderUserName = sendAsName,
                    TargetUsernames = GetTargetUsernames()
                };


            signalRHub.SendEvent(GameName, sendEvent);
            SendValue = "";
        }
    }

    private List<string>? GetTargetUsernames()
    {
        return SelectedClients.Select(x => x.userName).ToList();
    }
}
