@page "/playerSceneView"

@using KristofferStrube.Blazor.DOM
@using KristofferStrube.Blazor.MediaCaptureStreams
@using KristofferStrube.Blazor.WebAudio
@using MudBlazor
@using Mythologist_Client_WASM.Client.Components
@using Mythologist_Client_WASM.Client.Infos
@using Mythologist_Client_WASM.Client.Utils
@using SharedLogic.Model
@using System.Media


@inject ISnackbar snackBar
@inject ISignalRHubClientService signalRHub
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime;

<style>
    .debug-div-1 {
        border: 1px solid red;
    }

    .debug-div-2 {
        border: 1px solid blue;
    }

    .debug-div-3 {
        border: 1px solid green;
    }

    .debug-div-4 {
        border: 1px solid yellow;
    }

</style>

<MudStack Spacing="0" Class="pa-0 ma-0 debug-div-1">
    <MudPaper id="TopToolbar" Class="debug-div-2" Style="position: absolute left:0px top:0px; margin-bottom:0px;">
        <MudStack Class ="debug-div-3" Row="true" Justify="Justify.SpaceBetween">
            @if ((@currentScene != null) && (liveGameSettings.MusicEnabled))
            {
                <audio @key="@ForceAudioUpdate" id="audio-player" autoplay="@gameInfo.gameSettings.autoplayAudio" controls loop="@gameInfo.gameSettings.loopAudio" style="padding:5px">
                    <source src="@currentScene.backgroundMusicUri">
                    Your browser does not support the audio element.
                </audio>
            }
            <SendTextMessagePane Clients="@connectedClients" LocalClient="@localClient" GameName="@gameName"></SendTextMessagePane>
            <SettingsTogglerPane GameName="@gameName" LocalClient="@localClient" @bind-GameSettings="@liveGameSettings"></SettingsTogglerPane>
        </MudStack>
    </MudPaper>
    @if(currentScene != null){
        <MainContent GameName="@gameName" GameInfo="@gameInfo" EventReactor="@eventReactor" CurrentScene="@currentScene" ConnectedClients="@connectedClients" AllCharacters="@allCharacters" LocalClient="@localClient" LiveCharacterInfo="@liveCharacterInfo"></MainContent>
    }
    @if (@connectedClients != null && (@gameInfo != null))
    {
        <MudDrawer @bind-Open=@SceneDragOpen Variant="@DrawerVariant.Temporary" Anchor="Anchor.Bottom" Overlay="true">
            <MudGrid>
                <MudItem xs="5" Class="d-flex mb-n7 ml-6 align-center justify-start">
                </MudItem>
                <MudItem xs="2" Class="d-flex mb-n7 align-center justify-center">
                    <MudSpacer />
                    <MudIconButton  OnClick="@CloseDrawer" Size=Size.Small Icon="@Icons.Material.Filled.ArrowDropDown"></MudIconButton>
                    <MudSpacer />
                </MudItem>
                <MudItem xs="5" Class="d-flex mb-n7 align-center justify-end">
                       
                </MudItem>
                <MudItem xs="12">
                    <SceneDragAndDrop ConnectedClients=@connectedClients LocalClient="@localClient" SceneNames="@gameInfo.SceneNames()"></SceneDragAndDrop>
                </MudItem>
            </MudGrid>
        </MudDrawer>
    }
</MudStack>
@if (@localClient != null && @gameInfo != null)
{
    @if ((@localClient.isGM) || (@gameInfo.gameSettings.playersCanMoveThemselvesBetweenScenes))
    {
        <MudIconButton OnClick="@OpenDrawer" Color="Color.Primary" Size=Size.Large Icon="@Icons.Material.Outlined.ViewColumn" Style="float:right; margin-top: -60px; padding: 8px"></MudIconButton>
    }
}

@code {

    private bool SceneDragOpen;

    private string gameName = "";
    private string userName = "";
    private string? discordClientID = null;
    private string GMPassword = "";

    private List<ClientInfo>? connectedClients = null;
    ClientInfo? localClient = null;
    private List<string>? sceneNames = null;
    private GameInfo? gameInfo = null;
    private SceneModel? currentScene = null;
    private List<CharacterModel>? allCharacters = new List<CharacterModel>();

    private EventReactor? eventReactor;

    /*
    * The characters that appear in scenes are set via the database, and should appear in the allCharactersArry
    * This dict also contains all the characters <sceneID, <characterID, CharacterInfo>>, 
    * the difference being that this is the live session state of those characters. Particularly whether those
    * characters have entered the scene or not.
    * This state wont persist once the room has died.
    */
    private Dictionary<string, Dictionary<string, CharacterInfo>>? liveCharacterInfo { get; set; } = new Dictionary<string, Dictionary<string, CharacterInfo>>();

    private GameSettingsInfo liveGameSettings = new GameSettingsInfo();

    //Audio element needs to be FORCED to update.
    //Just change this somehow and it'll do it.
    private int ForceAudioUpdate = 0;

    private void OpenDrawer()
    {
        SceneDragOpen = true;
    }

    private void CloseDrawer()
    {
        SceneDragOpen = false;
    }

    protected override async Task OnInitializedAsync() {

        gameName = await sessionStorage.GetItemAsync<string>("GameName");
        userName = await sessionStorage.GetItemAsync<string>("UserName");
        discordClientID = await sessionStorage.GetItemAsync<string>("DiscordClientID");
        GMPassword = await sessionStorage.GetItemAsync<string>("GMPassword");

        eventReactor = new EventReactor(snackBar, StateHasChanged);

        try
        {
            signalRHub.InjectNotifyOfGameInfoDelegate(NotifyOfGameInfo);
            signalRHub.InjectNotifyOfClientsDelegate(NotifyOfClientsUpdate);
            signalRHub.InjectNotifyOfCharactersInSceneDelegate(NotifyOfCharactersInSceneUpdate);
            signalRHub.InjectNotifyOfGameSettingsInfoDelegate(NotifyOfGameSettingsInfo);
            signalRHub.InjectNotifyEventDelegate(eventReactor.NotifyOfEvent);
            signalRHub.InjectNotifyOfServerErrorDelegate(NotifyOfServerError);
            await signalRHub.RequestRefreshGameState(gameName);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"{ex.Message}, Navigating back to home page");
            NavManager.NavigateTo("/");
        }
    }

    private void NotifyOfClientsUpdate(List<ClientInfo> clients)
    {
        connectedClients = clients;

        //Get the current scene we're in
        localClient = clients.Find(x => x.signalRConnectionID == signalRHub.GetConnectionID());
        if (localClient != null)
        {
            SceneModel? newScene = gameInfo.scenes.Find(x => x.id == localClient.currentSceneID);

            if (newScene == null)
            {
                snackBar.Add("Error. Attempting to move to null scene", Severity.Error);
                NavManager.NavigateTo("/");
            }

            if (newScene != currentScene)
            {
                MoveLocalClientToNewScene(newScene);
            }
        }
        else
        {
            Console.WriteLine("Warning, could not find our connection in client notify");
        }

        StateHasChanged();
    }

    //(sceneId, <characterID, Character>)
    private void NotifyOfCharactersInSceneUpdate((string, Dictionary<string, CharacterInfo>) charactersInScene) {
        if (liveCharacterInfo == null) {
            throw new Exception("Attempting to update character info with unexpectedly null character info list");
        }

        string sceneId = charactersInScene.Item1;
        Dictionary<string, CharacterInfo> updatedCharacterState = charactersInScene.Item2;

        bool newlyAdded = liveCharacterInfo.TryAdd(sceneId, updatedCharacterState);
        if (!newlyAdded) {
            liveCharacterInfo[sceneId] = updatedCharacterState;
        }

        StateHasChanged();
    }

    private void NotifyOfGameInfo(GameInfo _gameInfo)
    {
        gameInfo = _gameInfo;
        allCharacters = gameInfo.characters;

        StateHasChanged();
    }

    private void NotifyOfGameSettingsInfo(GameSettingsInfo _gameSettingsInfo)
    {
        liveGameSettings = _gameSettingsInfo;
        StateHasChanged();
    }

    private void MoveLocalClientToNewScene(SceneModel? newScene)
    {
        currentScene = newScene;
        ForceAudioUpdate++;
        StateHasChanged();
    }


    private void NotifyOfServerError(string message) {
        snackBar.Add($"Server error : {message}", Severity.Error);
        NavManager.NavigateTo("/");
    }
}