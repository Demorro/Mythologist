@page "/playerSceneView"

@using KristofferStrube.Blazor.DOM
@using KristofferStrube.Blazor.MediaCaptureStreams
@using KristofferStrube.Blazor.WebAudio
@using MudBlazor
@using Mythologist_Client_WASM.Client.Audio
@using Mythologist_Client_WASM.Client.Components
@using Mythologist_Client_WASM.Client.Infos
@using SharedLogic.Model
@using System.Media


@inject ISnackbar snackBar
@inject ISignalRHubClientService signalRHub
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime;


    <MudStack Spacing="0">
        <MudPaper id="TopToolbar" Style="position: absolute left:0px top:0px; margin-bottom:0px;">
            <MudStack Row="true" Justify="Justify.SpaceBetween">
                @if ((@currentScene != null) && (liveGameSettings.MusicEnabled))
                {
                    <audio @key="@ForceAudioUpdate" id="audio-player" autoplay="@gameInfo.gameSettings.autoplayAudio" controls loop="@gameInfo.gameSettings.loopAudio" style="padding:5px">
                        <source src="@currentScene.backgroundMusicUri">
                        Your browser does not support the audio element.
                    </audio>
                }
                <SendTextMessagePane Clients="@connectedClients" LocalClient="@localClient" GameName="@gameName"></SendTextMessagePane>
                <SettingsTogglerPane GameName="@gameName" LocalClient="@localClient" @bind-GameSettings="@liveGameSettings"></SettingsTogglerPane>
            </MudStack>
        </MudPaper>
        @if(currentScene != null){
           <MainContent GameInfo="@gameInfo" CurrentScene="@currentScene" ConnectedClients="@connectedClients"></MainContent>
        }
        @if (@connectedClients != null && (@gameInfo != null))
        {
            <MudDrawer @bind-Open=@SceneDragOpen Variant="@DrawerVariant.Temporary" Anchor="Anchor.Bottom" Overlay="true">
                <MudGrid>
                    <MudItem xs="5" Class="d-flex mb-n7 ml-6 align-center justify-start">
                    </MudItem>
                    <MudItem xs="2" Class="d-flex mb-n7 align-center justify-center">
                        <MudSpacer />
                        <MudIconButton  OnClick="@CloseDrawer" Size=Size.Small Icon="@Icons.Material.Filled.ArrowDropDown"></MudIconButton>
                        <MudSpacer />
                    </MudItem>
                    <MudItem xs="5" Class="d-flex mb-n7 align-center justify-end">
                       
                    </MudItem>
                    <MudItem xs="12">
                        <SceneDragAndDrop ConnectedClients=@connectedClients LocalClient="@localClient" SceneNames="@gameInfo.SceneNames()"></SceneDragAndDrop>
                    </MudItem>
                </MudGrid>
            </MudDrawer>
        }
    </MudStack>
    @if (@localClient != null && @gameInfo != null)
    {
        @if ((@localClient.isGM) || (@gameInfo.gameSettings.playersCanMoveThemselvesBetweenScenes))
        {
            <MudIconButton OnClick="@OpenDrawer" Color="Color.Primary" Size=Size.Large Icon="@Icons.Material.Outlined.ViewColumn" Style="float:right; margin-top:-57px; padding:0px"></MudIconButton>
        }
    }

@code {

    private bool SceneDragOpen;

    private string gameName = "";
    private string userName = "";
    private string? discordClientID = null;
    private string GMPassword = "";

    private List<ClientInfo>? connectedClients = null;
    ClientInfo? localClient = null;
    private List<string>? sceneNames = null;
    private GameInfo? gameInfo = null;
    private SceneModel? currentScene = null;

    private GameSettingsInfo liveGameSettings = new GameSettingsInfo();

    //Audio element needs to be FORCED to update.
    //Just change this somehow and it'll do it.
    private int ForceAudioUpdate = 0;

    private void OpenDrawer()
    {
        SceneDragOpen = true;
    }

    private void CloseDrawer()
    {
        SceneDragOpen = false;
    }

    protected override async Task OnInitializedAsync() {

        gameName = await sessionStorage.GetItemAsync<string>("GameName");
        userName = await sessionStorage.GetItemAsync<string>("UserName");
        discordClientID = await sessionStorage.GetItemAsync<string>("DiscordClientID");
        GMPassword = await sessionStorage.GetItemAsync<string>("GMPassword");

        try
        {
            signalRHub.InjectNotifyOfGameInfoDelegate(NotifyOfGameInfo);
            signalRHub.InjectNotifyOfClientsDelegate(NotifyOfClientsUpdate);
            signalRHub.InjectNotifyOfGameSettingsInfoDelegate(NotifyOfGameSettingsInfo);
            signalRHub.InjectNotifyEventInfoDelegate(NotifyOfEventInfo);
            signalRHub.InjectNotifyOfServerErrorDelegate(NotifyOfServerError);
            await signalRHub.RequestRefreshGameState(gameName);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"{ex.Message}, Navigating back to home page");
            NavManager.NavigateTo("/");
        }
    }

    private void NotifyOfClientsUpdate(List<ClientInfo> clients)
    {
        connectedClients = clients;

        //Get the current scene we're in
        localClient = clients.Find(x => x.signalRConnectionID == signalRHub.GetConnectionID());
        if (localClient != null)
        {
            SceneModel? newScene = gameInfo.scenes.Find(x => x.id == localClient.currentSceneID);

            if (newScene == null)
            {
                snackBar.Add("Error. Attempting to move to null scene", Severity.Error);
                NavManager.NavigateTo("/");
            }

            if (newScene != currentScene)
            {
                MoveLocalClientToNewScene(newScene);
            }
        }
        else
        {
            Console.WriteLine("Warning, could not find our connection in client notify");
        }


        StateHasChanged();
    }

    private void NotifyOfGameInfo(GameInfo _gameInfo)
    {
        gameInfo = _gameInfo;
        StateHasChanged();
    }

    private void NotifyOfGameSettingsInfo(GameSettingsInfo _gameSettingsInfo)
    {
        liveGameSettings = _gameSettingsInfo;
        StateHasChanged();
    }

    private void MoveLocalClientToNewScene(SceneModel? newScene)
    {
        currentScene = newScene;
        ForceAudioUpdate++;
        StateHasChanged();
    }

    private void NotifyOfEventInfo(EventInfo theEvent)
    {
        switch (theEvent.EEventType)
        {
            case EventInfo.EventType.SendText:
                PopupRecievedChatMessage(theEvent);
                return;
        }

        Console.WriteLine("ERROR: Recieved unrecognized event type");
    }

    private void NotifyOfServerError(string message)
    {
        snackBar.Add($"Server error : {message}", Severity.Error);
        NavManager.NavigateTo("/");
    }

    private void PopupRecievedChatMessage(EventInfo theEvent)
    {
        ClientInfo? sender = theEvent.Sender;
        if(sender != null)
        {
            snackBar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            snackBar.Add($"{sender.userName}: {theEvent.Text}", Severity.Normal, config =>
            {
                config.Icon = Icons.Material.Filled.Message;
                config.IconColor = Color.Info;
                config.IconSize = Size.Large;
            });
        }
    }

}